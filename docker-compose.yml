services:
  ehealth-api:
    image: ehealth-api
    build: .
    ports:
      - "8080:8080"  # .NET API accessible at http://localhost:8080
    depends_on:
      - db
    environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - ConnectionStrings__PostgreSQL=Host=db;Port=5432;Database=e_health_bridge_db;Username=postgres;Password=newpassword
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: newpassword
      POSTGRES_DB: e_health_bridge_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8081:80"  # pgAdmin accessible at http://localhost:8081
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  db-init:
    image: postgres:15
    depends_on:
      - db
    environment:
      PGPASSWORD: newpassword
    entrypoint: >
      bash -c "
      echo 'Waiting for PostgreSQL...';
      until pg_isready -h db -p 5432 -U postgres; do
        sleep 2;
      done;
      echo 'Running init SQL...';
      psql -h db -U postgres -d e_health_bridge_db -c \"
        CREATE TABLE IF NOT EXISTS public.app_users (
          id integer NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
          username text NOT NULL,
          email text NOT NULL,
          password_hash text NOT NULL,
          first_name text NOT NULL,
          last_name text NOT NULL,
          is_active boolean NOT NULL DEFAULT true,
          created_at timestamp with time zone NOT NULL,
          updated_at timestamp with time zone NOT NULL
        );

        CREATE TABLE IF NOT EXISTS public.roles (
          id integer NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
          name text NOT NULL UNIQUE,
          description text,
          created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS public.user_roles (
          id integer NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
          user_id integer NOT NULL REFERENCES app_users(id) ON DELETE CASCADE,
          role_id integer NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
          created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(user_id, role_id)
        );

        INSERT INTO public.roles (name, description) 
        VALUES 
          ('Admin', 'Administrator with full access'),
          ('User', 'Regular user with basic access')
        ON CONFLICT (name) DO NOTHING;

        ALTER TABLE app_users 
        ADD COLUMN IF NOT EXISTS password_reset_token VARCHAR(255),
        ADD COLUMN IF NOT EXISTS password_reset_token_expiry TIMESTAMP,
        ADD COLUMN IF NOT EXISTS refresh_token VARCHAR(500),
        ADD COLUMN IF NOT EXISTS refresh_token_expiration TIMESTAMP;

        CREATE INDEX IF NOT EXISTS idx_app_users_password_reset_token ON app_users(password_reset_token);
        CREATE INDEX IF NOT EXISTS idx_app_users_refresh_token ON app_users(refresh_token);
      \"
      "

volumes:
  pgdata:
  pgadmin_data: